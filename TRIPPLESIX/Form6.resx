<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAhgAAAP8AAAD/AAAA/wAAAP8AAAD/AAAAwgAAAOUAAAD/AAAA/wAA
        AP8AAAD/AAAA8gAAAD0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8AAAA8gAAAP8AAAD/AAAA/wAAAP8AAADlAAAA+AAA
        AP8AAAD/AAAA/wAAAP8AAADZAAAAGQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABkAAADYAAAA/wAAAP8AAAD/AAAA/wAA
        APgAAAD9AAAA/wAAAP8AAAD/AAAA/wAAAMUAAAAMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADAAAAMUAAAD/AAAA/wAA
        AP8AAAD/AAAA/QAAAPoAAAD/AAAA/wAAAP8AAAD/AAAAwAAAAAoAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKAAAAwAAA
        AP8AAAD/AAAA/wAAAP8AAAD6AAAA6wAAAP8AAAD/AAAA/wAAAP8AAADOAAAAEQAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        ABEAAADOAAAA/wAAAP8AAAD/AAAA/wAAAOsAAADMAAAA/wAAAP8AAAD/AAAA/wAAAO0AAAAzAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAANAAAAO0AAAD/AAAA/wAAAP8AAAD/AAAAzAAAAJgAAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        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
        AAAAAAAAgAAAAcAAAAPgAAAH8AAAD/wAAD8=
</value>
  </data>
</root>