<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAANcNAADXDQAAAAAAAAAA
        AAAGBgYADw8PAA4ODgAREREAAwMDAAAAACsCAgLpCAgI/wkJCf8JCQn/CQkJ/wkJCf8JCQn/CQkJ/wkJ
        Cf8JCQn/CQkJ/wkJCf8JCQn/CQkJ/wkJCf8JCQn/CQkJ/wkJCf8ICAj/AgIC6QAAACwAAAAAAAAAAAAA
        AAAAAAAAAAAAAAUFBQAODg4HDAwMChAQEAULCwsNAAAAQQ0NDfFFRUX/TExM/0xMTP9MTEz/SEhI/0dH
        R/9HR0f/R0dH/0ZGRv9GRkb/SEhI/0xMTP9MTEz/TExM/0xMTP9MTEz/TExM/0VFRf8NDQ3wAAAAMwIC
        AgAJCQkABQUFAAEBAQABAQEAAAAAAAkJCVYHBwd/CwsLPgMDA8AAAADQDw8P+1RUVP9dXV3/XFxc/1pa
        Wv8pKSn/FxcX/xcXF/8VFRX/GRkZ/xkZGf8bGxv/UFBQ/11dXf9cXFz/XFxc/1xcXP9cXFz/VFRU/w8P
        D/AAAAA3CwsLRQ8PDyALCws/BwcHZAcHB2IEBAQADQ0NHAsLCywPDw8WCAgIQgICAm4PDw/0UlJS/1pa
        Wv9bW1v/Wlpa/0tLS/9GRkb/NjY2/xkZGf98fHz/fHx8/xoaGv9HR0f/XFxc/1tbW/9bW1v/W1tb/1xc
        XP9TU1P/Dw8P7wAAADsHBweBDQ0NOQgICHIEBAS0BAQEsAYGBkYLCwsoAAAAAAoKCgALCwspAwMDugUF
        BfsbGxv/IyMj/1JSUv9bW1v/S0tL/0ZGRv82Njb/Ghoa/3x8fP98fHz/Gxsb/0dHR/9cXFz/W1tb/1tb
        W/9bW1v/XFxc/1NTU/8PDw/wAAAAMhISEhcKCgo0EBAQFAgICEYICAhKAgICyAcHB3YAAAAAAAAAABMT
        ExYEBAR+CgoK9jU1Nf8+Pj7/V1dX/1paWv8pKSn/FhYW/xISEv8JCQn/KSkp/ycnJ/8MDAz/SEhI/1xc
        XP9bW1v/W1tb/1tbW/9cXFz/U1NT/w8PD/AAAAAwCgoKPAUFBY0JCQktAwMDtwICAsUICAgRDw8PBw0N
        DTkGBgaeCAgIcgAAADYQEBDvVVVV/0VFRf8mJib/JSUl/zMzM/9SUlL/ODg4/xoaGv+Dg4P/lpaW/yAg
        IP9HR0f/XFxc/1tbW/9bW1v/W1tb/1xcXP9TU1P/Dw8P/AUFBXoiIiIGCAgIKgUFBTAJCQkiCAgIEAAA
        AAAAAAAADg4OLgcHB38JCQldAAAANxAQEO9VVVX/SkpK/zIyMv8wMDD/Pz8//0pKSv8TExP/BgYG/zY2
        Nv+UlJT/IyMj/0dHR/9cXFz/W1tb/1tbW/9bW1v/XFxc/1NTU/8PDw/6BAQEbF5eXgIEBASOAQEBzQgI
        CFMBAQEABwcHgQcHB3gODg4eCgoKWhERESYFBQVrCAgI+iwsLP8yMjL/NTU1/1RUVP9dXV3/VFRU/zg4
        OP8aGhr/g4OD/5KSkv8fHx//R0dH/1xcXP9bW1v/W1tb/1tbW/9cXFz/U1NT/w8PD/EAAABFCQkJDgUF
        BR0CAgI4BQUFJQQEBBcFBQWdBgYGkwwMDCYICAhyDg4OMwYGBngGBgb8IiIi/yIiIv8pKSn/UlJS/1xc
        XP8sLCz/EBAQ/wcHB/8lJSX/JCQk/wsLC/9JSUn/XFxc/1tbW/9bW1v/W1tb/1xcXP9TU1P/Dw8P/AAA
        ANcFBQWKCgoKNgICAr8BAQHIAQEByf///wAdHR0IERERChgYGAoAAAAAAAAAMxAQEPBLS0v/JiYm/09P
        T/9CQkL/Ozs7/0RERP8fHx//IiIi/4iIiP+IiIj/JCQk/y8vL/9aWlr/W1tb/1tbW/9bW1v/XFxc/1NT
        U/8PDw/zAAAAXwkJCR8RERELBgYGMgUFBTcFBQU3BwcHEwQEBJ8DAwPABAQEuwsLCzgAAAAwEBAQ8FBQ
        UP9KSkr/VFRU/ysrK/8fHx//MDAw/x0dHf9kZGT/fHx8/319ff9NTU3/CQkJ/0FBQf9cXFz/W1tb/1tb
        W/9cXFz/U1NT/w8PD+4CAgJPCAgITQcHB1MJCQlAIyMjAgUFBQAVFRUKCAgIRgcHB1QICAhSExMTGAAA
        ADMPDw/wU1NT/1xcXP9bW1v/Wlpa/1paWv8iIiL/V1dX/2lpaf8vLy//MzMz/zQ0NP8bGxv/JCQk/1tb
        W/9bW1v/W1tb/1xcXP9TU1P/Dw8P7AQEBHYEBAS3AwMDvwQEBJgODg4JBgYGAAUFBZgJCQkZBQUFAAAA
        AAAICAh1AwMDvQYGBvoeHh7/Jycn/09PT/8xMTH/TExM/x0dHf9sbGz/s7Oz/5iYmP+Ghob/mpqa/2lp
        af8dHR3/Wlpa/1tbW/9bW1v/XFxc/1NTU/8PDw/zAQEBYwgICD4NDQ0bDQ0NEwYGBjUFBQU3CAgIYwsL
        CxINDQ0AYGBgAQsLC0wDAwOPCQkJ9zExMf87Ozv/VFRU/z8/P/9TU1P/Kysr/0JCQv+zs7P/bGxs/yUl
        Jf9gYGD/RUVF/yoqKv9cXFz/W1tb/1tbW/9cXFz/U1NT/w8PD/wAAADTAgICwwkJCTkHBwcjAgICuwEB
        AckHBwd9CQkJFwAAAAACAgIYAAAAGgAAADwQEBDvTk5O/zIyMv9AQED/XV1d/1lZWf9AQED/EBAQ/1dX
        V/+MjIz/hISE/05OTv8XFxf/TExM/1xcXP9bW1v/W1tb/1xcXP9TU1P/Dw8P9AAAAFYEBAQtAgICKAEB
        ASUCAgIxAwMDGwYGBoEJCQkXEhISBwMDA5oBAQHKAwMDfhAQEOxNTU3/MTEx/0BAQP9dXV3/R0dH/xUV
        Ff8LCwv/CQkJ/xgYGP8bGxv/Hx8f/0hISP9cXFz/W1tb/1tbW/9bW1v/XFxc/1NTU/8ODg7/AwMDlgMD
        A5kAAADNAAAAzAEBAagEBAQTAAAAAAAAAAASEhICBQUFIQQEBCgAAABEDg4O8E5OTv9XV1f/VlZW/1VV
        Vf9RUVH/R0dH/0dHR/9HR0f/RkZG/0lJSf9TU1P/VlZW/1VVVf9VVVX/VVVV/1VVVf9WVlb/Tk5O/w4O
        DvQAAABJBwcHHgMDAywDAwMrBAQEJAcHBwRLS0sADAwMABMTEwAFBQUAAgICAAAAACwDAwPjERER9xMT
        E/oVFRX/GRkZ/xQUFP8UFBT4FBQU9RQUFPYUFBT2FBQU9hMTE/YTExP1ExMT+BQUFP8ZGRn/FRUV/xMT
        E/oRERH3AwMD4wAAACwCAgIAAwMDAAMDAwAEBAQABwcHAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABwAA
        ADYAAAA9AAAAmjY2Nv+BgYH/ISEh/AAAAHkAAAA8AAAAPwAAAD8AAAA/AAAAPwAAADwAAAB5ISEh/IGB
        gf82Njb/AAAAmgAAAD0AAAA2AAAABwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAB2SkpK/7CwsP8uLi76AAAASgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AEouLi76sLCw/0pKSv8AAAB2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHhJSUn/ra2t/y0tLfoAAABNAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAATS0tLfqtra3/SUlJ/wAAAHgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAeElJSf+tra3/LS0t+gAAAE0AAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAABNLS0t+q2trf9JSUn/AAAAeAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB4SUlJ/62trf8tLS36AAAATQAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAE0tLS36ra2t/0lJSf8AAAB4AAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHdISEj/ra2t/y4u
        LvsAAABOAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAATi4uLvutra3/SEhI/wAAAHcAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAZzw8
        PP+vr6//PT09/wAAAG0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABtPT09/6+vr/88PDz/AAAAZwAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAA+ICAg9KWlpf9vb2//AgICxAAAABYAAAAAAAAAAAAAAAAAAAAAAAAAFgICAsRvb2//paWl/yAg
        IPQAAAA+AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAABAEBATDb29v/6urq/87Ozv/AAAAqQAAAC0AAAAIAAAACAAAAC0AAACpOzs7/6ur
        q/9vb2//BAQEwwAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFkeHh73lZWV/6SkpP9KSkr/EhIS5gMDA70DAwO9EhIS5kpK
        Sv+kpKT/lZWV/x4eHvcAAABZAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABgAAAIgnJyf8ioqK/7CwsP+Wlpb/enp6/3p6
        ev+Wlpb/sLCw/4qKiv8nJyf8AAAAiAAAAAYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACgAAAHgSEhLnS0tL/35+
        fv+UlJT/lJSU/35+fv9LS0v/EhIS5wAAAHgAAAAKAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACgoKAQAA
        ADwAAACfBQUF4A8PD/oPDw/6BQUF4AAAAJ8AAAA8CgoKAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAADwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPAAAA/wAAAP/gPAf/4DwH/+A8B//gGAf/4A
        AH/+AAB//gAAf/4AAH/+AAB//wAA//8AAP8=
</value>
  </data>
</root>